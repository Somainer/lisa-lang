(define (bool? true) true)
(define (bool? false) true)
(define (bool? _) false)

(define (bind vars vals env)
    (if (nil? vars) env
        (bind (cdr vars) (cdr vals) (record-updated env (car vars) (car vals)))))
(define builtin-eval eval)
(define apply-primitive apply)
(declare eval apply evlist)
(define (eval exp env)
    (cond ((number? exp) exp)
        ((nil? exp) ())
        ((string? exp) exp)
        ((bool? exp) exp)
        ((symbol? exp) (env exp))
        ((quoted? exp) (.exp (wrap exp)))
        ((atom? exp) exp)
        ((= (car exp) 'lambda)
            (list 'closure (cdr exp) env))
        ((= (car exp) 'if)
            (if (eval (.[1] exp) env)
                (eval (.[2] exp) env)
                (eval (.[3] exp) env)))
        ((= (car exp) 'closure) exp)
        ((= (car exp) 'define)
            (let ((symbol (.[1] exp)))
                (if (list? symbol)
                    (list 'define (car symbol)
                        (eval (cons 'lambda (cons (cdr symbol) (cdr (cdr exp)))) env))
                    (list 'define symbol (eval (.[2]) env)))))
        (else (let ((procedure (eval (car exp) env)))
            (cond
                ((macro? procedure)
                    (apply procedure (cdr exp)))
                (else (apply procedure
                            (evlist (cdr exp) env))))))))

(define (apply proc args)
    (cond
        ((procedure? proc) (apply-primitive proc args))
        ((= (car proc) 'closure)
            (eval (.[1] (.[1] proc))
                        (bind (car (.[1] proc))
                                args
                                (.[2] proc))))))

(define (evlist exps env)
    (if (nil? exps)
        '()
        (cons (eval (car exps) env) (evlist (cdr exps) env))))

(define Y
    (eval '(lambda (fn) ((lambda (u) (u u)) (lambda (f) (fn (lambda (s) ((f f) s)))))) (prelude-environment)))

(define primitive
    (record-updated (prelude-environment) 'Y Y))

(define (make-evaluator)
    (define-mutable! index)
    (set! index 0)
    (define inner-env (mutable-record primitive))
    (define (is-define? ('define symbol value)) true)
    (define (is-define? _) false)
    (define (handle-result result)
        (cond
            ((is-define? result)
                (let (((_ symbol value) result))
                    (record-update! inner-env symbol value)
                    result))
            (else result)))
    (lambda (exp)
        (define result (handle-result (eval exp inner-env)))
        (define idx
            (cond
                ((nil? result) index)
                ((is-define? result) 'define)
                (else
                    (let ((idx index))
                        (record-update! inner-env $"[$index]" result)
                        (set! index (+ index 1))
                        idx))))
        (define return (cons result idx))
        return))

(define (eval-lisa exp)
    (eval exp primitive))

(define (lisa-closure? ('closure (... _))) true)
(define (lisa-closure? _) false)

(define (display exp)
    (cond ((lisa-closure? exp) "#<procedure>")
            (else (string exp))))

(define (get-type-of exp)
    (cond ((lisa-closure? exp) "Closure")
            (else (typename-of exp))))

(define (interpreter)
    (define evaluator (make-evaluator))
    (define (iter)
        (returnable (lambda (return)
            (define raw-input (read "lambda>"))
            (if (= raw-input '(quit)) (return ()))
            (define result (evaluator raw-input))
            (let (((value idx) result))
                (if (= idx 'define)
                    (println! $"Defined symbol ${(.[1] value)}: ${(.[2] value)}")
                    (println! (string "[" (.[1] result) "]:") (get-type-of (car result)) "=" (display (car result)))))
            (iter))))
    (iter))

(define (builtin-interpreter)
    (define (def-clause? ('define (... _))) true)
    (define (def-clause? _) false)
    (while true
        (group!
            (define raw-input (read "lisa>"))
            (if (def-clause? raw-input) (builtin-eval raw-input)
                (println! (builtin-eval raw-input))))))

(interpreter)
