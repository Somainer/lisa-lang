(define (not true) "(not true) => false" false)
(define (not false) "(not false) => true" true)

(define-macro (or a b)
    "or :: (Bool, Bool) => Bool = if(truthy? a) a else b"
    '(block
        (define __a ~a)
        (if (truthy? __a) __a ~b)))

(define-macro (and a b)
    "and :: (Bool, Bool) => Bool = if(truthy? a) b else a"
    '(block
        (define __a ~a)
        (if (truthy? __a) ~b __a)))

(define (Y fn)
    "Y combinator, nothing interesting."
    ((lambda (u) (u u)) (lambda (f) (fn (lambda (s) ((f f) s))))))

(define (to-string x (when? (&true (.toString x))))
    (.toString x))

(define (to-string x)
    (.toString (wrap x)))

(define (cons x y)
    "Construct a pair, use car to fetch the first and cdr to fetch the second."
    (define (pair 0) x)
    (define (pair 1) y)
    (define (pair 'pair? ) true)
    (define (pair 'to-string)
        (+ "[" (to-string x) " " (to-string y) "]"))
    pair)

(define (pair? pair (when? (pair 'pair? ))) true)
(define (pair? _) false)

(define (car p (when (pair? p))) (p 0))
(define (cdr p (when (pair? p))) (p 1))

(define-macro (delay e)
    "Construct a lazy value (named promise)."
    '(block
        (define (promise 'promise? ) true)
        (define (promise) ~e)
        promise))
(define (promise? p (when? (p 'promise? ))) "Returns true if it is a promise" true)
(define (promise? _) "Otherwise returns false" false)
(define (force e (when (promise? e))) "Force execute a promise" (e))

(define-macro (lazy-cons x y)
    '(cons ~x (delay ~y)))

(define lazy-car car)
(define (lazy-cdr p) (force (cdr p)))

(define (sort (seq) _) (seq))
(define (sort (seq head (... tail)) by)
    (define left (filter tail (lambda (x) (by x head))))
    (define right (filter tail (lambda (x) (not (by x head)))))
    (.appendedAll 
        (.appended (sort left by) head) 
        (sort right by)))
(define (sort ls) (sort ls <))

(define (max-2 a b (? (< a b)))
    "a < b, max(a, b) = b"
    b)
(define (max-2 a _)
    "Otherwise should be a"
    a)

(define (max (seq)) (panic! "Max on an empty list."))
(define (max (seq x)) x)
(define (max (seq h (... t)))
    (max-2 h (max t)))
(define (max (... xs)) (max xs))

(define (min-2 a b (? < a b)) a)
(define (min-2 _ b) b)
(define (min (seq)) (panic! "Min on an empty list."))
(define (min (seq x)) x)
(define (min (seq h (... t)))
    (min-2 h (min t)))
(define (min (... t)) (min t))

(define-macro (shadow function)
    "Shadow a defined function to (), in order to redefine a function rather than create a polymorphic function."
    '(define ~function ()))

(define (constant x)
    "constant :: a, b => a -> b -> a"
    (lambda (_) x))

(define (compose f g)
    (lambda (x) (g (f x))))

(define (bool? f (when? ((constant true) (not f)))) true)
(define (bool? _) false)

(define (number? n (when? ((constant true) (+ 0 n)))) true)
(define (number? _) false)

(define (string? n (when? ((constant true) (+ "" n)))) true)
(define (string? _) false)

(define (closure? c (when? (.startsWith (.toString (wrap c)) "#Closure"))) true)
(define (closure? c (when? (.startsWith (.toString (wrap c)) "#PolymorphClosure"))) true)
(define (closure? c (when? (.startsWith (.verboseString (wrap c)) "#PolymorphClosure"))) true)
(define (closure? _) false)

(define (macro? m (when? (.startsWith (.toString (wrap m)) "#Macro"))) true)
(define (macro? m (when? (.startsWith (.verboseString (wrap m)) "#PolymorphMacro"))) true)
(define (macro? _) false)

(define (polymorphic? m (when? (.startsWith (.toString (wrap m)) "#Polymorph"))) true)
(define (polymorphic? m (when? (.startsWith (.verboseString (wrap m)) "#Polymorph"))) true)
(define (polymorphic? _) false)

(define (native-function? fn (when? (.startsWith (.toString (wrap fn)) "#[Native Code]"))) true)
(define (native-function? _) false)

(define (callable? fn)
    (or
        (native-function? fn)
        (or
            (closure? fn)
            (macro? fn))))

(define (quoted? x (when? ((constant true) ~x))) true)
(define (quoted? _) false)

(define (nil? ()) true)
(define (nil? _) false)

(define (curried-2 fn) ; For procedures with no arity.
    (lambda (x)
        (lambda (y) (fn x y))))

(define (curried fn (when? ((constant true) (length fn))))
    (define arity (length fn))
    (define (curried-impl f arg (when (>= (length arg) arity)))
        (apply f arg))
    (define (curried-impl f arg)
        (lambda ((... args))
            (curried-impl f (.appendedAll arg args))))
    (define (func (... args)) (curried-impl fn args))
    (set-doc func (+ "Curried: " (get-doc fn)))) ; Ensure curried returns a closure when encounters 0-arity functions.

(define (flip-closure fn)
    "flip-closure :: (a -> b -> c) -> b -> a -> c"
    (lambda (x y) (fn y x)))

(define falsy? (compose truthy? not))

(define-macro (unless pred alt cons)
    '(if ~pred ~cons ~alt))

(define (|> x (... fs))
    (define (apply-seq a (seq)) a)
    (define (apply-seq a (seq h (... t)) (? (quoted? h)))
        (apply-seq (a h) t))
    (define (apply-seq a (seq h (... t)))
        (apply-seq (h a) t))
    (apply-seq x fs))

(define-phrase (symbol (... args) (? (quoted? symbol))) '&(# ~symbol ~args))

(define-macro (called meth (... args) (when (quoted? meth)))
    "Useful when chaining calls. Is equivalent to (block (obj 'f args) obj)."
    '(lambda (self) (&self (self ~meth ~args))))
(define-macro (called meth (... args))
    "Call method on an object then returns itself."
    '(lambda (self) (&self (~meth self ~args))))

; (define limit-arity (curried limit-arity))
(define (copied-docstring f1 f2)
    (set-doc f1 (get-doc f2)))

(define (polymorphic-lambda (... fs))
    (define-mutable! fs)
    (while (> (length fs) 0)
        (group!
            (define self (.head fs))
            (set! fs (.tail fs))))
    self)

(define-macro (define-polymorphic self '=> (... fs))
    '(group!
        (define ~self ())
        (define-mutable! fs)
        (set! fs (list ~fs))
        (while (> (length fs) 0)
            (group!
                (define ~self (.head fs))
                (set! fs (.tail fs))))
        ~self))

(import-env! scala-root scala)
(define (none 'option? ) true)
(define (none 'has-next? ) false)
(define (none 'defined?) false)
(define (none 'map _) none)
(define (none 'filter _) none)
(define (none 'get-or-else x) x)
(define (none 'or-else x) x)
(define (none 'to-scala ) scala.None)
(define (none 'to-string) "none")
(define (some x)
    (define (some-impl 'option? ) true)
    (define (some-impl 'map fn)
        (some (fn x)))
    (define (some-impl 'defined?) true)
    (define (some-impl 'has-next?) true)
    (define (some-impl 'next) (seq x none))
    (define (some-impl 'filter fn (? (fn x))) some-impl)
    (define (some-impl 'filter _) none)
    (define (some-impl 'get ) x)
    (define (some-impl 'get-or-else _) x)
    (define (some-impl 'or-else _) some-impl)
    (define (some-impl 'to-scala) (scala.Some x))
    (define (some-impl 'to-string) (+ "(some " (to-string x) ")"))
    some-impl)

(define-macro (option-from x)
    '(block
        (define (receive y (when? (&true (.get y)))) (some (.get y)))
        (define (receive _) none)
        (receive (try-option ~x))))

(define-macro (method-caller method (... args))
    '(lambda (object) (object '~method ~args)))

(define (env-of fn)
    (.capturedEnv (wrap fn)))
(define identity &#)

(define (current-env)
    (|> &# wrap .capturedEnv))

(define-macro (for (var init) condition update (... body))
    "for macro, usage: (for (loop-variable init) loop-condition next-loop-value ...body)
    With break and continue support.
    Example: (for (i 0) (< i 10) (+ i 1) (println! i) (if (> i 4) (break)))"
    (define continue-sym (gen-sym))
    (define break-sym (gen-sym))
    '(returnable
        (lambda (~break-sym)
            (define (break) (~break-sym))
            (define-mutable! ~var)
            (set! ~var ~init)
            (while ~condition
                (group!
                    (returnable
                        (lambda (~continue-sym)
                            (define (continue) (~continue-sym))
                            ~body))
                    (set! ~var ~update))))))

(define-macro (. obj meth (... args))
    (define sym (string->symbol (string "." meth)))
    '(~sym ~obj ~args))