(define cons 
    (lambda (x y) 
        (lambda (m) (m x y))))
(define car (lambda (m) (m (lambda (a b) a))))
(define cdr (lambda (m) (m (lambda (a b) b))))

(define (or a b)
    (if (truthy? a) a b))
(define (and a b)
    (if (not (truthy? a)) a b))
(define (not x)
    (if (truthy? x) false true))

(define (logical-not false) true)
(define (logical-not true) false)

;This implementation is stupid.

(define (< a b)
    (= (.compareTo a b) -1))

(define (< a b)
    (define java-cmp (.compareTo a b))
    (cond ((= java-cmp -1) true)
          ((= java-cmp 0) false)
          ((= java-cmp 1) false)
          (else (< java-cmp 0))))
    
(define (< a b)
    (cond ((= a b) false)
          ((= a 0) true)
          ((= b 0) false)
          (else (< (- a 1) (- b 1)))))

(define (<= a b)
    (or (= a b) (< a b)))
(define (> a b)
    (not (<= a b)))
(define (>= a b)
    (or (= a b) (> a b)))

(define (max a b)
    (if (< a b) b a))

(define eq? =)

(define (Y fn) ((lambda (u) (u u)) (lambda (f) (fn (lambda (s) ((f f) s))))))

(define-macro (for v 'in 'range (n) ': do-sth) '(for ~v in range (0 , ~n) : ~do-sth))
(define-macro (for v 'in 'range (s ', n) ': do-sth)
    '(block 
        (define-mutable! ~v)
        (set! ~v ~s)
        (while (< ~v ~n) 
            (block 
                ~do-sth 
                (set! ~v (+ ~v 1))))))

(define-macro (for (v '= s ', pred ', v '= next) '{ do-sth '})
    '(group!
        (define-mutable! ~v)
        (set! ~v ~s)
        (while ~pred
            (group!
                ~do-sth
                (set! ~v ~next)))))

(define (sum-from start end)
    (define-mutable! start)
    (define-mutable! result)
    (set! result 0)
    (while (<= start end) 
        (group!
            (set! result (+ result start))
            (set! start (+ start 1))))
    result)

(define (fact n)
    (define-mutable! result)
    (set! result 1)
    (define-mutable! i)
    (set! i 1)
    (while (<= i n)
        (block
            (set! result (* result i))
            (set! i (+ i 1))))
    result)

(define-macro (for v from pred step body)
    '(group!
        (define-mutable! ~v)
        (set! ~v ~from)
        (while ~pred 
            (group!
                ~body
                (set! ~v ~step)))))

(define (sort-by ls by) ; Can only sort a seq
    (define (empty? ls) (= (.length ls) 0))
    (if (empty? ls) ls
        (block  (define head (.head ls))
                (define tail (.tail ls))
                (define left (filter tail (lambda (x) (by x head))))
                (define right (filter tail (lambda (x) (not (by x head)))))
                (.appendedAll 
                    (.appended (sort-by left by) head) 
                    (sort-by right by)))))

(define (sort ls) (sort-by ls <))